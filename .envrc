#
# Commands dependencies
# =====================
#
DIRENV_CMD_DEPENDENCIES="unzip tar mkdir curl chmod rm"
for mandatory_cmd in ${DIRENV_CMD_DEPENDENCIES}; do
  if [ -z "$(which ${mandatory_cmd})" ]; then
    echo "===> Mandatory command not found: ${mandatory_cmd}"
    exit 1
  fi
done

#
# Ruby configuration
# =====================
#

layout ruby
#use ruby 3.0.2

#direnv_load brew bundle exec -- direnv dump
direnv_load brew bundle

layout_node

# Either use node version specified in package.json
#use node package.json

export NODE_VERSIONS="v16.15.0"
#nvm install v16.14.2

# Or a specific version
#use node ${NODE_VERSIONS}
use_nvm ${NODE_VERSIONS}

#sudo apt install openjdk-11-dbg
#sudo update-java-alternatives -s java-1.11.0-openjdk-amd64

export DIRENV_TMP_DIR="${PWD}/.direnv"
export DIRENV_BIN_DIR="${DIRENV_TMP_DIR}/bin"
if [ ! -e "${DIRENV_BIN_DIR}" ]; then
    mkdir -p "${DIRENV_BIN_DIR}"
fi
export PATH="${DIRENV_BIN_DIR}:${PATH}"


# layout_python3
# layout_anaconda
export PYTHON_VERSION="3.8.6"
layout pyenv ${PYTHON_VERSION}

DIRENV_PYTHON_LIBS_DIR_RELATIVE="$(find ${DIRENV_TMP_DIR} -type d -name site-packages)"
export DIRENV_PYTHON_LIBS_DIR="$(realpath ${DIRENV_PYTHON_LIBS_DIR_RELATIVE})"

#
# Python pyenv installation
# ==========================
#
PYENV_PKG_URL="https://pyenv.run"
if [ ! -e "${HOME}/.pyenv" ]; then
  echo "===> Getting pyenv (can take a while to execute)"
  curl -s -L "${PYENV_PKG_URL}" | bash
  echo "===> Run : pyenv init"
  echo "===> Run : pyenv local ${PYTHON_VERSION}"
fi

#
# Python 2 requirements
# ==========================
#

for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
  pyenv shell ${VERSION} ;
  pip install py2venv ;
done

export VENV_TMP_DIR="${PWD}/.venv"
export VENV_BIN_DIR="${VENV_TMP_DIR}/bin"

# check if python version is set in current dir
if [ -f ".python-version" ] ; then
  if [ ! -d "${VENV_TMP_DIR}" ] ; then
    echo "Installing virtualenv for $(python -V)"
    # if we didn't install `py2venv` for python 2.x, we would need to use
    # `virtualenv`, which you would have to install separately.
    python -m venv ${VENV_TMP_DIR}
  fi
  echo "Activating $(python -V) virtualenv"
  source ${VENV_BIN_DIR}/activate
fi
# announce python version and show the path of the current python in ${PATH}
echo "Virtualenv has been activated for $(python -V)"
echo "$(which python)"

#
# Python pip requirements
# ==========================
#

for VERSION in $(pyenv versions --bare | egrep '^2.') ; do
  pyenv shell ${VERSION} ;
  pip install py2venv ;
done

#
# Python pip upgrade
# ==========================
#
#  curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
for VERSION in $(pyenv versions --bare) ; do
  pyenv shell ${VERSION} ;
  pip install --upgrade pip ;
done

#
# Python pre-commit installation
# ==========================
#
# python -m pip install pre-commit==2.19.0
PRECOMMIT_VERSION="2.19.0"
if [ ! -e "${VENV_BIN_DIR}/pre-commit" ]; then
  echo "===> Getting pre-commit:${PRECOMMIT_VERSION} (can take a while to execute)"
  python -m pip install pre-commit=="${PRECOMMIT_VERSION}"
fi

#
# Python 3 requirements
# ==========================
#
#python -m pip install -r requirements.txt
#pipenv install
#pip install --ignore-pipfile
#pipenv lock --requirements > requirements.pipenv.txt

#
# Levant CLI installation
# ==========================
#
# curl -L https://github.com/hashicorp/levant/releases/download/0.2.9/linux-amd64-levant -o levant
LEVANT_VERSION="0.2.9"
LEVANT_ARCH="linux-amd64"
LEVANT_PKG_NAME="${LEVANT_ARCH}-levant"
LEVANT_PKG_URL="https://github.com/hashicorp/levant/releases/download/${LEVANT_VERSION}/${LEVANT_PKG_NAME}"
LEVANT_PKG_PATH="${DIRENV_TMP_DIR}/levant"
if [ ! -e "${DIRENV_BIN_DIR}/levant" ]; then
  echo "===> Getting levant:${LEVANT_VERSION}:${LEVANT_ARCH} (can take a while to execute)"
  curl -s -L "${LEVANT_PKG_URL}" -o "${LEVANT_PKG_PATH}"
  mv ${LEVANT_PKG_PATH} ${DIRENV_BIN_DIR}
  #unzip ${LEVANT_PKG_PATH} -d ${DIRENV_BIN_DIR}
  chmod 700 ${DIRENV_BIN_DIR}/levant
  rm -f ${LEVANT_PKG_PATH}
fi

#
# Ansible CLI installation
# ==========================
#
# python -m pip install --user https://github.com/ansible/ansible/archive/stable-2.13.tar.gz
ANSIBLE_VERSION="2.13"
ANSIBLE_PKG_URL="https://github.com/ansible/ansible/archive/stable-${ANSIBLE_VERSION}.tar.gz"
if [ ! -e "${VENV_BIN_DIR}/ansible" ]; then
  echo "===> Getting ansible:${ANSIBLE_VERSION} (can take a while to execute)"
  python -m pip install "${ANSIBLE_PKG_URL}"
fi

#
# Ansible configuration
# =====================
#
export ANSIBLE_LIBRARY="${PWD}/plugins/modules:${ANSIBLE_LIBRARY}"
#export ANSIBLE_SSH_ARGS="-F ${PWD}/ssh.cfg"
#export ANSIBLE_INVENTORY="hosts"
export ANSIBLE_COLLECTIONS_PATHS="${DIRENV_TMP_DIR}"

#
# Terraform CLI installation
# ==========================
#
TF_VERSION="1.1.9"
TF_ARCH="linux_amd64"
TF_PKG_NAME="terraform_${TF_VERSION}_${TF_ARCH}.zip"
TF_PKG_URL="https://releases.hashicorp.com/terraform/${TF_VERSION}/${TF_PKG_NAME}"
TF_PKG_PATH="${DIRENV_TMP_DIR}/${TF_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/terraform" ]; then
  echo "===> Getting terraform:${TF_VERSION}:${TF_ARCH} (can take a while to execute)"
  curl -s -L "${TF_PKG_URL}" -o "${TF_PKG_PATH}"
  unzip ${TF_PKG_PATH} -d ${DIRENV_BIN_DIR}
  chmod 700 ${DIRENV_BIN_DIR}/terraform
  rm -f ${TF_PKG_PATH}
fi
#
# Terraform CLI configuration
# ==========================
#
export TF_PLUGIN_CACHE_DIR="${DIRENV_TMP_DIR}/terraform-plugin-cache"
if [ ! -e "${TF_PLUGIN_CACHE_DIR}" ]; then
    mkdir -p "${TF_PLUGIN_CACHE_DIR}"
fi

#
# GO installation
# ==========================
#
#curl -O https://storage.googleapis.com/golang/go1.13.5.linux-amd64.tar.gz
GO_VERSION="1.18.1"
GO_ARCH="linux-amd64"
GO_PKG_NAME="go${GO_VERSION}.${GO_ARCH}.tar.gz"
GO_PKG_PATH="${DIRENV_TMP_DIR}/${GO_PKG_NAME}"
GO_PKG_URL="https://storage.googleapis.com/golang/${GO_PKG_NAME}"
if [ ! -e "${DIRENV_BIN_DIR}/go/bin/go" ]; then
  echo "===> Getting go:${GO_VERSION} (can take a while to execute)"
  curl -s -L "${GO_PKG_URL}" -o "${GO_PKG_PATH}"
  tar -xf ${GO_PKG_PATH} -C ${DIRENV_BIN_DIR}
  rm -f ${GO_PKG_PATH}
fi

PATH_add ${DIRENV_BIN_DIR}/go/bin/

#
# GO sec installation
# ==========================
#
#curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.11.0
GO_SEC_VERSION="2.11.0"
GO_SEC_PKG_URL="https://raw.githubusercontent.com/securego/gosec/master/install.sh"
if [ ! -e "${DIRENV_BIN_DIR}/go/bin/gosec" ]; then
  echo "===> Getting go sec:${GO_SEC_VERSION} (can take a while to execute)"
  curl -sfL "${GO_SEC_PKG_URL}" | sh -s -- -b $(go env GOPATH)/bin v${GO_SEC_VERSION}
fi

layout go

#
# GO shfmt installation
# ==========================
#
#go install mvdan.cc/sh/v3/cmd/shfmt@latest # shfmt
#GO_SHFMT_VERSION="latest"
#GO_SHFMT_PKG_PATH="mvdan.cc/sh/v3/cmd/shfmt@${GO_SHFMT_VERSION}"
#if [ ! -e "${DIRENV_BIN_DIR}/go/bin/shfmt" ]; then
#    echo "===> Getting go shfmt:${GO_SHFMT_VERSION} (can take a while to execute)"
#    GOPATH="${DIRENV_BIN_DIR}/go/"
#    go install ${GO_SHFMT_PKG_PATH}
#fi

#go install github.com/aquasecurity/tfsec/cmd/tfsec@latest

#
# GO dep installation
# ==========================
#
#curl https://raw.githubusercontent.com/golang/dep/master/install.sh
#GO_DEP_VERSION="0.5.4"
#GO_DEP_PKG_URL="https://raw.githubusercontent.com/golang/dep/v${GO_DEP_VERSION}/install.sh"
#if [ ! -e "${DIRENV_BIN_DIR}/go" ]; then
#    echo "===> Getting go dep:${GO_DEP_VERSION} (can take a while to execute)"
#   if [ ! -e "${DIRENV_TMP_DIR}/go/bin" ]; then
#       mkdir -p "${DIRENV_TMP_DIR}/go/bin"
#   fi
#
#    curl -s -L "${GO_DEP_PKG_URL}" | sh
#fi

#
# Environment configuration
# =========================
#
#
ENV_ADDONS=".env.local .env.secrets"
for addon in ${ENV_ADDONS}; do
  if [ -e "${PWD}/${addon}" ]; then
    source ${PWD}/${addon}
  fi
done

# See https://github.com/direnv/direnv/wiki/PS1
unset PS1
