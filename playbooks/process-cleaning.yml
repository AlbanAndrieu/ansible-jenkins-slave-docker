---

#ansible-playbook -i inventory/production -v playbooks/process-cleaning.yml --limit albandri -e ansible_python_interpreter="/opt/ansible/env35/bin/python3.5" -vvvv | tee setup.log

- hosts: docker-cleaning
  become: true

  tasks:

#    - name: Get running processes (1)
#      find:
#        paths: /proc
#        file_type: directory
#        age: 1d
#      register: all_processes
#
#    - name: Show running processes (1)
#      shell: "ps -e --forest -p {{ item.path }}"
#      with_items: "{{ all_processes.files }}"

    - name: Get running processes # noqa 301
      shell: "find /proc -maxdepth 1 -user jenkins -type d -mmin +200 -exec basename {} \\; | xargs ps | grep {{ item.process_name_matcher }} | awk '{ print $1 }'"
#      shell: "ps -few | grep {{ item.process_name_matcher }} | awk '{print $2}'"
#      args:
#        executable: /bin/bash
      register: running_processes
      with_items:
        - { process_name_matcher: 'grunt' }
        - { process_name_matcher: 'google/chrome' }
        - { process_name_matcher: 'chromedriver' }
        - { process_name_matcher: 'selenium' }
        - { process_name_matcher: 'ZAPROXY' }
        - { process_name_matcher: 'jboss-modules' }
        - { process_name_matcher: 'sqlservr' }
        - { process_name_matcher: 'container-structure-test' }
      ignore_errors: true
      tags:
        - clean
        - vm

#    - debug:
#        msg: "Process {{ item.stdout_lines }} for {{ item.item }}"
#      with_items: '{{ running_processes.results }}'

    - debug:
        msg: "Show process id {{ item.stdout_lines }}"
      with_items: '{{ running_processes.results }}'
      tags:
        - clean
        - vm

#    - name: Debug running processes
#      debug:
#        msg: "{{ running_processes.results|map(attribute='stdout_lines')|list }}"
#
#    - name: Show running processes # noqa 301 305
#      shell: "ps -e --forest -p {{ item }}"
#      with_items: "{{ running_processes.results|map(attribute='stdout_lines')|list }}"

    - name: Kill running processes # noqa 301 305
      shell: "kill {{ item }}"
      with_items: "{{ running_processes.results|map(attribute='stdout_lines')|list }}"
      ignore_errors: true
      tags:
        - clean
        - vm

    - name: Wait for running processes to stop # noqa 301 305
      wait_for:
        path: "/proc/{{ item }}/status"
        state: absent
      with_items: "{{ running_processes.results|map(attribute='stdout_lines')|list }}"
      ignore_errors: true
      register: killed_processes
      tags:
        - clean
        - vm

#
#    - name: Force kill stuck processes # noqa 301 305
#      shell: "kill -9 {{ item }}"
#      with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
