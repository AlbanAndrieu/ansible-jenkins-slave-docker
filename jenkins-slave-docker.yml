#see https://blog.trifork.com/2013/04/02/ansible-example-playbook-to-setup-jenkins-slave/

#as root
#ansible-playbook jenkins-slave-docker.yml -i hosts -vvvv
#as albandri
#ansible-playbook jenkins-slave-docker.yml -i hosts -vvvv --ask-sudo-pass --sudo
# --extra-vars "jenkins_username=aandrieu jenkins_password=tbd"
#for testing purpose
#sudo ansible-playbook -i hosts -c local -v jenkins-slave-docker.yml -vvvv

- name: Assert platform is supported
  hosts: all
  remote_user: root
  gather_facts: true

  tasks:
    - name: Assert platform is supported
      assert:
        that:
          - ansible_os_family in ['Debian', 'RedHat', 'Windows', 'Solaris']
          - ansible_architecture in ['x86_64']
          
- hosts: all
  gather_facts: true
  tasks:
    - name: group hosts by distribution
      group_by: key="{{ ansible_distribution }}-{{ ansible_distribution_version }}"

- hosts: RedHat-7*:RedHat-6*:CentOS-7*:CentOS-6*:Ubuntu-17*:Ubuntu-16*:Ubuntu-15*:Ubuntu-13*:Ubuntu-14*:Ubuntu-12*
  gather_facts: false
  tasks:
    - name: group hosts for supported distributions
      group_by: key="supported"

- hosts: "!supported"
  gather_facts: false
  tasks:
    - name: fail for unsupported distribution
      fail: msg="{{ ansible_distribution }} {{ ansible_distribution_version }}
                 is not a supported OS for a Tower installation.  Supported
                 OSes include Red Hat Enterprise Linux 6/7, CentOS 6/7, or
                 Ubuntu 12.04/12.04/14.04/16.04/17.04."
    - debug: msg="Version {{ ansible_distribution }} {{ ansible_distribution_version }} {{ ansible_architecture }}"

- hosts: localhost

  tasks:
    - name: Install Ansible-Galaxy dependencies
      shell: ansible-galaxy install -r requirements.yml -p ./roles/
      #shell: ansible-galaxy install -r requirements.yml -p ./roles/ --ignore-errors --force
      ignore_errors: yes
      
- name: Bootstrap python onto server
  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
#  become: yes

  pre_tasks:
  - name: Install python 2 if not there
    raw: |
      test -e /usr/bin/python || \
      (apt -y update && apt install -y python-simplejson)
    register: output
    changed_when: output.stdout|trim() != ""

  - name: Install sudo if not there
    become: yes
    raw: |
      test -e /usr/bin/sudo || apt install -y sudo
    register: output
    changed_when: output.stdout|trim() != ""

#- name: Add repo configuration to all nodes
#  hosts: RedHat-7*:RedHat-6*:CentOS-7*:CentOS-6*
#  become: yes
#
#  roles:
#    - geerlingguy.repo-epel
#    - geerlingguy.repo-remi

- name: Apply common configuration to all nodes
  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-14*:Ubuntu-13*:Ubuntu-12*
  gather_facts: false
  remote_user: root

  roles:
    - alban.andrieu.common

  vars:
       apt_notification_email: "alban.andrieu@misys.com"
       apt_upgrade_system_enabled: no

#- import_playbook: dns.yml

- import_playbook: python.yml

#Below ntp role is included in administration role
- name: Apply ntp configuration to all nodes
  hosts: all
  gather_facts: false
  remote_user: root
  become: yes
  ignore_errors: yes

  roles:
    - geerlingguy.ntp

  vars:
       ntp_timezone: Europe/Paris

#Use below only if you want your servers to be part of build farm
#- name: Apply administration configuration to all nodes
#  hosts: Ubuntu-17*:Ubuntu-16*:Ubuntu-14*:Ubuntu-12*
#  gather_facts: false
#  remote_user: root
#
#
#  roles:
#    - alban.andrieu.administration
    
#- name: Apply hostname configuration
#  hosts: all
#  remote_user: root
##  connection: local
#
#  roles:
#    - hostname

#- name: Install git
#  hosts: all
#  become: true
#  remote_user: root
##  connection: local
#
#  roles:
#    - role: geerlingguy.git
#
#- name: Install subversion
#  hosts: all
#  remote_user: root
##  connection: local
#
#  roles:
#    - role: alban.andrieu.subversion
#
#  vars:
#      subversion_rabbitvcs_enabled: no
#      subversion_diff_enabled: no

- import_playbook: java.yml

- import_playbook: maven.yml

- name: Install chrome
  hosts: chrome
  remote_user: albandri


  roles:
     - role: chrome

  vars:
       google_talkplugin_enabled: yes                       # Enable module
       google_agent_pkg_state: installed # Package states: present or installed or latest

- import_playbook: jenkins-slave.yml
    
#- import_playbook: cpp.yml

#- import_playbook: certificate.yml

#- import_playbook: docker.yml

#- name: Apply swarm configuration to all jenkins slaves
#  hosts: all
#  sudo: yes
#  remote_user: vagrant
#  connection: local
##  remote_user: vagrant
#
#  vars_prompt:
#  - name: jenkins_username
#    prompt: "What is your jenkins user?"
#    private: no
#  - name: jenkins_password
#    prompt: "What is your jenkins password?"
#    private: yes
#
#  roles:
#    - alban.andrieu.jenkins-swarm
#
#  vars:
#    jenkins_home: "/jenkins"

- name: Install xvbf
  hosts: jenkins-slaves
  remote_user: root

  roles:
    - alban.andrieu.xvbf
#
##Below cmake role is included in cpp role
##- name: Install cmake
##  hosts: all
##  remote_user: root
###  connection: local
##
##  roles:
##    - alban.andrieu.cmake
#
#- name: Install cpp
#  hosts: all
#  remote_user: root
##  connection: local
#
#  roles:
#    - alban.andrieu.cpp
#
#  vars:
#      gcc_version: "4:4.8.2-1ubuntu6"
#      cppunit_version: "1.13-0"
#      boost_version: "1.54"
